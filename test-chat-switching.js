require('dotenv').config();

// –¢–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —â–æ —á–∞—Ç–∏ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ –º—ñ–∂ –Ω–∏–º–∏

const testUserAddress = '0x233c8C54F25734B744E522bdC1Eed9cbc8C97D0c';

async function testChatSwitching() {
  console.log('üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ —á–∞—Ç–∞–º–∏...');
  console.log('üë§ –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:', testUserAddress);
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤
  console.log('\nüì• –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —á–∞—Ç—ñ–≤...');
  const initialResponse = await fetch(`http://localhost:3000/api/load-chats?userAddress=${encodeURIComponent(testUserAddress)}`);
  const initialData = await initialResponse.json();
  const initialCount = initialData.chats ? initialData.chats.length : 0;
  console.log('üìä –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤:', initialCount);
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç
  const testChatId = `switching-test-${Date.now()}`;
  console.log('\nüìù –ö—Ä–æ–∫ 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç—É...');
  console.log('üÜî –¢–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç ID:', testChatId);
  
  const testMessages = [
    { role: 'user', content: '–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è' },
    { role: 'assistant', content: '–¶–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI –¥–ª—è —Ç–µ—Å—Ç—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è —á–∞—Ç—ñ–≤' }
  ];
  
  const saveResponse = await fetch('http://localhost:3000/api/save-chat', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chatId: testChatId,
      title: '–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è —á–∞—Ç—ñ–≤',
      messages: testMessages,
      userAddress: testUserAddress
    })
  });
  
  if (!saveResponse.ok) {
    throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Ç—É: ${saveResponse.status}`);
  }
  
  const saveResult = await saveResponse.json();
  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
  console.log('üìã Irys ID:', saveResult.irysId);
  
  // –û—á—ñ–∫—É—î–º–æ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó
  console.log('\n‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó (10 —Å–µ–∫—É–Ω–¥)...');
  await new Promise(resolve => setTimeout(resolve, 10000));
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —á–∞—Ç –∑'—è–≤–∏–≤—Å—è
  console.log('\nüì• –ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—è–≤–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç—É...');
  const afterSaveResponse = await fetch(`http://localhost:3000/api/load-chats?userAddress=${encodeURIComponent(testUserAddress)}`);
  const afterSaveData = await afterSaveResponse.json();
  const afterSaveCount = afterSaveData.chats ? afterSaveData.chats.length : 0;
  console.log('üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', afterSaveCount);
  
  if (afterSaveCount <= initialCount) {
    throw new Error('–ù–æ–≤–∏–π —á–∞—Ç –Ω–µ –∑\'—è–≤–∏–≤—Å—è –≤ —Å–ø–∏—Å–∫—É!');
  }
  
  // –°–∏–º—É–ª—é—î–º–æ "–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è" –º—ñ–∂ —á–∞—Ç–∞–º–∏ - –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —á–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤
  console.log('\nüîÑ –ö—Ä–æ–∫ 4: –°–∏–º—É–ª—è—Ü—ñ—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ —á–∞—Ç–∞–º–∏ (5 —Ä–∞–∑—ñ–≤)...');
  
  for (let i = 1; i <= 5; i++) {
    console.log(`   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è ${i}/5...`);
    const switchResponse = await fetch(`http://localhost:3000/api/load-chats?userAddress=${encodeURIComponent(testUserAddress)}`);
    const switchData = await switchResponse.json();
    
    if (!switchResponse.ok) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ ${i}: ${switchResponse.status}`);
    }
    
    // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è–º–∏
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  // –û—á—ñ–∫—É—î–º–æ —â–µ —Ç—Ä–æ—Ö–∏, —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ –Ω–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  console.log('\n‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ–≥–æ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (5 —Å–µ–∫—É–Ω–¥)...');
  await new Promise(resolve => setTimeout(resolve, 5000));
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤
  console.log('\nüì• –ö—Ä–æ–∫ 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —á–∞—Ç—ñ–≤...');
  const finalResponse = await fetch(`http://localhost:3000/api/load-chats?userAddress=${encodeURIComponent(testUserAddress)}`);
  const finalData = await finalResponse.json();
  const finalCount = finalData.chats ? finalData.chats.length : 0;
  console.log('üìä –§—ñ–Ω–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤:', finalCount);
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
  const expectedCount = initialCount + 1; // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å + 1 –Ω–æ–≤–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç
  
  if (finalCount === expectedCount) {
    console.log('\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!');
    console.log('‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ');
    console.log(`üìä –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è: ${expectedCount}, –û—Ç—Ä–∏–º–∞–Ω–æ: ${finalCount}`);
  } else if (finalCount > expectedCount) {
    console.log('\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù–û!');
    console.log('‚ö†Ô∏è  –í–∏—è–≤–ª–µ–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —á–∞—Ç–∏, –º–æ–∂–ª–∏–≤–æ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ');
    console.log(`üìä –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è: ${expectedCount}, –û—Ç—Ä–∏–º–∞–Ω–æ: ${finalCount}`);
    console.log(`üîç –†—ñ–∑–Ω–∏—Ü—è: +${finalCount - expectedCount} –∑–∞–π–≤–∏—Ö —á–∞—Ç—ñ–≤`);
  } else {
    console.log('\n‚ùì –ù–ï–û–ß–Ü–ö–£–í–ê–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢');
    console.log('‚ö†Ô∏è  –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤ –º–µ–Ω—à–∞ –∑–∞ –æ—á—ñ–∫—É–≤–∞–Ω—É');
    console.log(`üìä –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è: ${expectedCount}, –û—Ç—Ä–∏–º–∞–Ω–æ: ${finalCount}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç
testChatSwitching().catch(error => {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É:', error);
  process.exit(1);
});