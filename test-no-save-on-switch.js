const fetch = require('node-fetch');

// –¢–µ—Å—Ç–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const testUserAddress = '0x233c8C54F25734B744E522bdC1Eed9cbc8C97D0c';

async function testNoSaveOnSwitch() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: —á–∞—Ç–∏ –ù–ï –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ');
  console.log('=' .repeat(60));
  
  try {
    // 1. –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤
    console.log('üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —á–∞—Ç—ñ–≤...');
    const initialResponse = await fetch(`http://localhost:3000/api/load-chats?userAddress=${encodeURIComponent(testUserAddress)}`);
    const initialData = await initialResponse.json();
    const initialCount = initialData.chats ? initialData.chats.length : 0;
    console.log(`‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤: ${initialCount}`);
    
    // 2. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç
    const testChatId = `no-save-switch-test-${Date.now()}`;
    const testMessages = [
      { role: 'user', content: '–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏' },
      { role: 'assistant', content: '–¢–µ—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI' }
    ];
    
    console.log('üíæ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç—É...');
    const saveResponse = await fetch('http://localhost:3000/api/save-chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chatId: testChatId,
        title: '–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è',
        messages: testMessages,
        userAddress: testUserAddress
      })
    });
    
    if (!saveResponse.ok) {
      throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${saveResponse.status}`);
    }
    
    const saveResult = await saveResponse.json();
    console.log(`‚úÖ –ß–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ Irys ID: ${saveResult.irysId}`);
    
    // 3. –ü–æ—á–µ–∫–∞—Ç–∏ –Ω–∞ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—é
    console.log('‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó (10 —Å–µ–∫—É–Ω–¥)...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    // 4. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ –Ω–æ–≤–∏–π —á–∞—Ç –∑'—è–≤–∏–≤—Å—è
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—è–≤–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç—É...');
    const afterSaveResponse = await fetch(`http://localhost:3000/api/load-chats?userAddress=${encodeURIComponent(testUserAddress)}`);
    const afterSaveData = await afterSaveResponse.json();
    const afterSaveCount = afterSaveData.chats ? afterSaveData.chats.length : 0;
    console.log(`‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${afterSaveCount}`);
    
    if (afterSaveCount !== initialCount + 1) {
      throw new Error(`–û—á—ñ–∫—É–≤–∞–ª–æ—Å—è ${initialCount + 1} —á–∞—Ç—ñ–≤, –∞–ª–µ –∑–Ω–∞–π–¥–µ–Ω–æ ${afterSaveCount}`);
    }
    
    // 5. –°–∏–º—É–ª—é–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ —á–∞—Ç–∞–º–∏ (–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö —Ä–∞–∑—ñ–≤)
    console.log('üîÑ –°–∏–º—É–ª—è—Ü—ñ—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ —á–∞—Ç–∞–º–∏...');
    for (let i = 0; i < 5; i++) {
      console.log(`   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è ${i + 1}/5...`);
      await fetch(`http://localhost:3000/api/load-chats?userAddress=${encodeURIComponent(testUserAddress)}`);
      await new Promise(resolve => setTimeout(resolve, 500)); // –ü–∞—É–∑–∞ –º—ñ–∂ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è–º–∏
    }
    
    // 6. –ü–æ—á–µ–∫–∞—Ç–∏ —Ç—Ä–æ—Ö–∏ –¥–ª—è –º–æ–∂–ª–∏–≤–∏—Ö –∑–∞—Ç—Ä–∏–º–∞–Ω–∏—Ö –∑–±–µ—Ä–µ–∂–µ–Ω—å
    console.log('‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–æ–∂–ª–∏–≤–∏—Ö –∑–∞—Ç—Ä–∏–º–∞–Ω–∏—Ö –∑–±–µ—Ä–µ–∂–µ–Ω—å (5 —Å–µ–∫—É–Ω–¥)...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // 7. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —á–∞—Ç—ñ–≤...');
    const finalResponse = await fetch(`http://localhost:3000/api/load-chats?userAddress=${encodeURIComponent(testUserAddress)}`);
    const finalData = await finalResponse.json();
    const finalCount = finalData.chats ? finalData.chats.length : 0;
    console.log(`üìä –§—ñ–Ω–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤: ${finalCount}`);
    
    // 8. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const expectedCount = initialCount + 1; // –¢—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –Ω–æ–≤–∏–π —á–∞—Ç
    
    console.log('\n' + '=' .repeat(60));
    console.log('üìã –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£:');
    console.log(`   –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${initialCount}`);
    console.log(`   –ü—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${afterSaveCount}`);
    console.log(`   –ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—å: ${finalCount}`);
    console.log(`   –û—á—ñ–∫—É–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${expectedCount}`);
    
    if (finalCount === expectedCount) {
      console.log('\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!');
      console.log('‚úÖ –ß–∞—Ç–∏ –ù–ï –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ');
      console.log('‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π AI');
    } else {
      console.log('\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù–û!');
      console.log(`‚ùå –û—á—ñ–∫—É–≤–∞–ª–æ—Å—è ${expectedCount} —á–∞—Ç—ñ–≤, –∞–ª–µ –∑–Ω–∞–π–¥–µ–Ω–æ ${finalCount}`);
      console.log('‚ùå –ú–æ–∂–ª–∏–≤–æ, —á–∞—Ç–∏ –≤—Å–µ —â–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ');
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
  }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç
testNoSaveOnSwitch();