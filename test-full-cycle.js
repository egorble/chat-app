require('dotenv').config();

// –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç —Ü–∏–∫–ª—É: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è -> –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è -> –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
async function testFullCycle() {
  console.log('üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É —á–∞—Ç—É...');
  
  const testUserAddress = '0x233c8C54F25734B744E522bdC1Eed9cbc8C97D0c';
  const testChatId = `full-cycle-test-${Date.now()}`;
  
  console.log('üë§ –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:', testUserAddress);
  console.log('üÜî –¢–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç ID:', testChatId);
  
  // –ö—Ä–æ–∫ 1: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö —á–∞—Ç—É
  const chatData = {
    chatId: testChatId,
    title: '–ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ç–µ—Å—Ç',
    userAddress: testUserAddress,
    messages: [
      {
        id: '1',
        content: '–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.',
        role: 'user',
        timestamp: new Date().toISOString()
      },
      {
        id: '2',
        content: '–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?',
        role: 'assistant',
        timestamp: new Date().toISOString()
      }
    ],
    createdAt: new Date(),
    updatedAt: new Date()
  };
  
  console.log('\nüìù –ö—Ä–æ–∫ 1: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Ç—É —á–µ—Ä–µ–∑ API...');
  
  try {
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Ç—É
    const saveResponse = await fetch('http://localhost:3000/api/save-chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(chatData)
    });
    
    if (!saveResponse.ok) {
      throw new Error(`Save failed! status: ${saveResponse.status}`);
    }
    
    const saveResult = await saveResponse.json();
    console.log('‚úÖ –ß–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    console.log('üìã Irys ID:', saveResult.irysId);
    
    // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó
    console.log('\n‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—ó (10 —Å–µ–∫—É–Ω–¥)...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–∞—Ç—ñ–≤
    console.log('\nüì• –ö—Ä–æ–∫ 2: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–∞—Ç—ñ–≤ —á–µ—Ä–µ–∑ API...');
    
    const loadResponse = await fetch(`http://localhost:3000/api/load-chats?userAddress=${testUserAddress}`);
    
    if (!loadResponse.ok) {
      throw new Error(`Load failed! status: ${loadResponse.status}`);
    }
    
    const loadResult = await loadResponse.json();
    console.log('‚úÖ –ß–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    console.log('üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤:', loadResult.chats?.length || 0);
    
    // –ü–æ—à—É–∫ –Ω–∞—à–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç—É
    const foundChat = loadResult.chats?.find(chat => chat.chatId === testChatId);
    
    if (foundChat) {
      console.log('\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!');
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö');
      console.log('üìã –î–µ—Ç–∞–ª—ñ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ —á–∞—Ç—É:');
      console.log('   - ID:', foundChat.chatId);
      console.log('   - –ù–∞–∑–≤–∞:', foundChat.title);
      console.log('   - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', foundChat.messages?.length || 0);
      console.log('   - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:', foundChat.userAddress);
      console.log('   - Irys ID:', foundChat.irysId);
    } else {
      console.log('\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù–û!');
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö');
      console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Ç–∏:');
      loadResult.chats?.slice(0, 5).forEach((chat, index) => {
        console.log(`   ${index + 1}. ${chat.title} (ID: ${chat.chatId})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É
testFullCycle();